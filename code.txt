package.json
{
  "name": "plantilladocumentacion",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node src/app.js",
    "dev": "nodemon src/app.js",
    "test": "mocha src/test/supertest.test.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@faker-js/faker": "^9.2.0",
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "dotenv": "^16.4.5",
    "express": "^4.18.2",
    "jsonwebtoken": "^8.5.1",
    "mongoose": "^6.7.5",
    "multer": "^1.4.5-lts.1",
    "supertest": "^6.3.3",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1"
  },
  "devDependencies": {
    "chai": "^4.3.7",
    "mocha": "^10.1.0"
  }
}
---------------------------------------------------
Dockerfile
FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD ["npm", "start"]
---------------------------------------------------
.env
MONGODB_URI=mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/bkd3_entregafinal?retryWrites=true&w=majority&appName=Cluster0
MONGODB_TEST_URI=mongodb+srv://cri2024:cri2024@cluster0.mswsapd.mongodb.net/bkd3_entregafinal_test?retryWrites=true&w=majority&appName=Cluster0
PORT=8080
MOCK_USER_PASSWORD=coder123
---------------------------------------------------
src\app.js
import express from 'express';
import mongoose from 'mongoose';
import cookieParser from 'cookie-parser';
import usersRouter from './routes/users.router.js';
import petsRouter from './routes/pets.router.js';
import adoptionsRouter from './routes/adoption.router.js';
import sessionsRouter from './routes/sessions.router.js';
import mocksRouter from './routes/mocks.router.js';
import dotenv from 'dotenv';
import configureSwagger  from './utils/swaggerConfig.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT

const isTestEnv = process.env.NODE_ENV === 'test';
const dbURI = isTestEnv ? process.env.MONGODB_TEST_URI : process.env.MONGODB_URI;

mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log(`Conexión a MongoDB establecida en ${isTestEnv ? 'modo test' : 'producción'}`);
        app.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
        });
    })
    .catch(error => {
        console.error('Error al conectar a MongoDB:', error);
        process.exit(1);
    });

app.use(express.json());
app.use(cookieParser());

app.use('/api/users', usersRouter);
app.use('/api/pets', petsRouter);
app.use('/api/adoptions', adoptionsRouter);
app.use('/api/sessions', sessionsRouter);
app.use('/api/mocks', mocksRouter);
configureSwagger (app);
export default app;
---------------------------------------------------
src\controllers\adoptions.controller.js
import { adoptionsService, petsService, usersService } from "../services/index.js"

const getAllAdoptions = async(req,res)=>{
    const result = await adoptionsService.getAll();
    res.send({status:"success",payload:result})
}

const getAdoption = async(req,res)=>{
    const adoptionId = req.params.aid;
    const adoption = await adoptionsService.getBy({_id:adoptionId})
    if(!adoption) return res.status(404).send({status:"error",error:"Adoption not found"})
    res.send({status:"success",payload:adoption})
}

const createAdoption = async(req,res)=>{
    const {uid,pid} = req.params;
    const user = await usersService.getUserById(uid);
    if(!user) return res.status(404).send({status:"error", error:"user Not found"});
    const pet = await petsService.getBy({_id:pid});
    if(!pet) return res.status(404).send({status:"error",error:"Pet not found"});
    if(pet.adopted) return res.status(400).send({status:"error",error:"Pet is already adopted"});
    user.pets.push(pet._id);
    await usersService.update(user._id,{pets:user.pets})
    await petsService.update(pet._id,{adopted:true,owner:user._id})
    await adoptionsService.create({owner:user._id,pet:pet._id})
    res.send({status:"success",message:"Pet adopted"})
}

export default {
    createAdoption,
    getAllAdoptions,
    getAdoption
}
---------------------------------------------------
src\controllers\pets.controller.js
import PetDTO from "../dto/Pet.dto.js";
import { petsService } from "../services/index.js"
import __dirname from "../utils/index.js";

const getAllPets = async(req,res)=>{
    const pets = await petsService.getAll();
    res.send({status:"success",payload:pets})
}

const createPet = async(req,res)=> {
    const {name,specie,birthDate} = req.body;
    if(!name||!specie||!birthDate) return res.status(400).send({status:"error",error:"Incomplete values"})
    const pet = PetDTO.getPetInputFrom({name,specie,birthDate});
    const result = await petsService.create(pet);
    res.send({status:"success",payload:result})
}

const updatePet = async(req,res) =>{
    const petUpdateBody = req.body;
    const petId = req.params.pid;
    const result = await petsService.update(petId,petUpdateBody);
    res.send({status:"success",message:"pet updated"})
}

const deletePet = async(req,res)=> {
    const petId = req.params.pid;
    const result = await petsService.delete(petId);
    res.send({status:"success",message:"pet deleted"});
}

const createPetWithImage = async(req,res) =>{
    const file = req.file;
    const {name,specie,birthDate} = req.body;
    if(!name||!specie||!birthDate) return res.status(400).send({status:"error",error:"Incomplete values"})
    console.log(file);
    const pet = PetDTO.getPetInputFrom({
        name,
        specie,
        birthDate,
        image:`${__dirname}/../public/img/${file.filename}`
    });
    console.log(pet);
    const result = await petsService.create(pet);
    res.send({status:"success",payload:result})
}
export default {
    getAllPets,
    createPet,
    updatePet,
    deletePet,
    createPetWithImage
}
---------------------------------------------------
src\controllers\sessions.controller.js
import { usersService } from "../services/index.js";
import { createHash, passwordValidation } from "../utils/index.js";
import jwt from 'jsonwebtoken';
import UserDTO from '../dto/User.dto.js';

const register = async (req, res) => {
    try {
        const { first_name, last_name, email, password } = req.body;
        if (!first_name || !last_name || !email || !password) return res.status(400).send({ status: "error", error: "Incomplete values" });
        const exists = await usersService.getUserByEmail(email);
        if (exists) return res.status(400).send({ status: "error", error: "User already exists" });
        const hashedPassword = await createHash(password);
        const user = {
            first_name,
            last_name,
            email,
            password: hashedPassword
        }
        let result = await usersService.create(user);
        console.log(result);
        res.send({ status: "success", payload: result._id });
    } catch (error) {

    }
}

const login = async (req, res) => {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).send({ status: "error", error: "Incomplete values" });
    const user = await usersService.getUserByEmail(email);
    if(!user) return res.status(404).send({status:"error",error:"User doesn't exist"});
    const isValidPassword = await passwordValidation(user,password);
    if(!isValidPassword) return res.status(400).send({status:"error",error:"Incorrect password"});
    const userDto = UserDTO.getUserTokenFrom(user);
    const token = jwt.sign(userDto,'tokenSecretJWT',{expiresIn:"1h"});
    res.cookie('coderCookie',token,{maxAge:3600000}).send({status:"success",message:"Logged in"})
}

const current = async(req,res) =>{
    const cookie = req.cookies['coderCookie']
    const user = jwt.verify(cookie,'tokenSecretJWT');
    if(user)
        return res.send({status:"success",payload:user})
}

const unprotectedLogin  = async(req,res) =>{
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).send({ status: "error", error: "Incomplete values" });
    const user = await usersService.getUserByEmail(email);
    if(!user) return res.status(404).send({status:"error",error:"User doesn't exist"});
    const isValidPassword = await passwordValidation(user,password);
    if(!isValidPassword) return res.status(400).send({status:"error",error:"Incorrect password"});
    const token = jwt.sign(user,'tokenSecretJWT',{expiresIn:"1h"});
    res.cookie('unprotectedCookie',token,{maxAge:3600000}).send({status:"success",message:"Unprotected Logged in"})
}
const unprotectedCurrent = async(req,res)=>{
    const cookie = req.cookies['unprotectedCookie']
    const user = jwt.verify(cookie,'tokenSecretJWT');
    if(user)
        return res.send({status:"success",payload:user})
}
export default {
    current,
    login,
    register,
    current,
    unprotectedLogin,
    unprotectedCurrent
}
---------------------------------------------------
src\controllers\users.controller.js
import { usersService } from "../services/index.js"
import { createHash } from "../utils/index.js";

const getAllUsers = async (req, res) => {
    try {
        const users = await usersService.getAll();
        res.status(200).send({ status: "success", payload: users });
    } catch (error) {
        console.error("Error obteniendo usuarios:", error);
        res.status(500).send({ status: "error", error: "Error interno del servidor" });
    }
};

const getUser = async (req, res) => {
    try {
        const userId = req.params.uid;
        const user = await usersService.getUserById(userId);
        if (!user) {
            return res.status(404).send({ status: "error", error: "Usuario no encontrado" });
        }
        res.status(200).send({ status: "success", payload: user });
    } catch (error) {
        console.error("Error obteniendo el usuario:", error);
        res.status(500).send({ status: "error", error: "Error interno del servidor" });
    }
};

const updateUser = async (req, res) => {
    try {
        const userId = req.params.uid;
        const updateBody = req.body;
        const user = await usersService.getUserById(userId);

        if (!user) {
            return res.status(404).send({ status: "error", error: "Usuario no encontrado" });
        }

        const updatedUser = await usersService.update(userId, updateBody);
        res.status(200).send({ status: "success", message: "Usuario actualizado", payload: updatedUser });
    } catch (error) {
        console.error("Error actualizando el usuario:", error);
        res.status(500).send({ status: "error", error: "Error interno del servidor" });
    }
};

const deleteUser = async (req, res) => {
    try {
        const userId = req.params.uid;
        const user = await usersService.getUserById(userId);

        if (!user) {
            return res.status(404).send({ status: "error", error: "Usuario no encontrado" });
        }

        await usersService.delete(userId);
        res.status(200).send({ status: "success", message: "Usuario eliminado" });
    } catch (error) {
        console.error("Error eliminando el usuario:", error);
        res.status(500).send({ status: "error", error: "Error interno del servidor" });
    }
};

const createUser = async (req, res) => {
    try {
        const { first_name, last_name, email, password, role } = req.body;

        if (!first_name || !last_name || !email || !password) {
            return res.status(400).send({
                status: "error",
                error: "Todos los campos requeridos deben ser completados"
            });
        }

        const existingUser = await usersService.getUserByEmail(email);
        if (existingUser) {
            return res.status(400).send({
                status: "error",
                error: "El correo electrónico ya está registrado"
            });
        }

        const hashedPassword = await createHash(password);
        const newUser = {
            first_name,
            last_name,
            email,
            password: hashedPassword,
            role: role || "user",
            pets: []
        };

        const createdUser = await usersService.create(newUser);

        res.status(201).send({
            status: "success",
            message: "Usuario creado exitosamente",
            payload: createdUser
        });
    } catch (error) {
        console.error("Error creando usuario:", error);
        res.status(500).send({
            status: "error",
            error: "Error interno del servidor"
        });
    }
};

export default {
    deleteUser,
    getAllUsers,
    getUser,
    updateUser,
    createUser
}
---------------------------------------------------
src\dao\Adoption.js
import adoptionModel from "./models/Adoption.js";

export default class Adoption {

    get = (params) =>{
        return adoptionModel.find(params);
    }

    getBy = (params) =>{
        return adoptionModel.findOne(params);
    }

    save = (doc) =>{
        return adoptionModel.create(doc);
    }

    update = (id,doc) =>{
        return adoptionModel.findByIdAndUpdate(id,{$set:doc})
    }
    
    delete = (id) =>{
        return adoptionModel.findByIdAndDelete(id);
    }
}
---------------------------------------------------
src\dao\Pets.dao.js
import petModel from "./models/Pet.js";

export default class Pet {

    get = (params) =>{
        return petModel.find(params)
    }

    getBy = (params) =>{
        return petModel.findOne(params);
    }

    save = (doc) =>{
        return petModel.create(doc);
    }

    update = (id,doc) =>{
        return petModel.findByIdAndUpdate(id,{$set:doc})
    }

    delete = (id) =>{
        return petModel.findByIdAndDelete(id);
    }
}
---------------------------------------------------
src\dao\Users.dao.js
import userModel from "./models/User.js";


export default class Users {
    
    get = (params) =>{
        return userModel.find(params);
    }

    getBy = (params) =>{
        return userModel.findOne(params);
    }

    save = (doc) =>{
        return userModel.create(doc);
    }

    update = (id,doc) =>{
        return userModel.findByIdAndUpdate(id,{$set:doc})
    }

    delete = (id) =>{
        return userModel.findByIdAndDelete(id);
    }
}
---------------------------------------------------
src\dao\models\Adoption.js
import mongoose from "mongoose";


const collection = "Adoptions";

const schema = new mongoose.Schema({
    owner:{
        type:mongoose.SchemaTypes.ObjectId,
        ref:'Users'
    },
    pet:{
        type:mongoose.SchemaTypes.ObjectId,
        ref:'Pets'
    }
})

const adoptionModel = mongoose.model(collection,schema);

export default adoptionModel;
---------------------------------------------------
src\dao\models\Pet.js
import mongoose from 'mongoose';

const collection = 'Pets';

const schema = new mongoose.Schema({
    name:{
        type:String,
        required:true,
    },
    specie:{
        type:String,
        required:true
    },
    birthDate:Date,
    adopted:{
        type:Boolean,
        default:false
    },
    owner:{
        type:mongoose.SchemaTypes.ObjectId,
        ref:'Users'
    },
    image:String
})

const petModel = mongoose.model(collection,schema);

export default petModel;
---------------------------------------------------
src\dao\models\User.js
import mongoose from 'mongoose';

const collection = 'Users';

const schema = new mongoose.Schema({
    first_name:{
        type: String,
        required:true
    },
    last_name:{
        type:String,
        required:true
    },
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    },
    role: {
        type:String,
        default:'user'
    },
    pets:{
        type:[
            {
                _id:{
                    type:mongoose.SchemaTypes.ObjectId,
                    ref:'Pets'
                }
            }
        ],
        default:[]
    }
})

const userModel = mongoose.model(collection,schema);

export default userModel;
---------------------------------------------------
src\dto\Pet.dto.js
export default class PetDTO {
    static getPetInputFrom = (pet) =>{
        return {
            name:pet.name||'',
            specie:pet.specie||'',
            image: pet.image||'',
            birthDate:pet.birthDate||'12-30-2000',
            adopted:false
        }
    }
}
---------------------------------------------------
src\dto\User.dto.js
export default class UserDTO {
    static getUserTokenFrom = (user) =>{
        return {
            name: `${user.first_name} ${user.last_name}`,
            role: user.role,
            email:user.email
        }
    }
}
---------------------------------------------------
src\repository\AdoptionRepository.js
import GenericRepository from "./GenericRepository.js";

export default class AdoptionRepository extends GenericRepository {
    constructor(dao){
        super(dao);
    }
}
---------------------------------------------------
src\repository\GenericRepository.js
export default class GenericRepository {
    constructor(dao) {
        this.dao = dao;
    }

    getAll = (params) =>{
        return this.dao.get(params);
    }

    getBy = (params) =>{
        return this.dao.getBy(params);
    }

    create = (doc) =>{
        return this.dao.save(doc);
    }

    update = (id,doc) =>{
        return this.dao.update(id,doc);
    }

    delete = (id) =>{
        return this.dao.delete(id);
    }
}
---------------------------------------------------
src\repository\PetRepository.js
import GenericRepository from "./GenericRepository.js";

export default class PetRepository extends GenericRepository {
    constructor(dao) {
        super(dao);
    }
}
---------------------------------------------------
src\repository\UserRepository.js
import GenericRepository from "./GenericRepository.js";

export default class UserRepository extends GenericRepository{
    constructor(dao){
        super(dao);
    }
    
    getUserByEmail = (email) =>{
        return this.getBy({email});
    }
    getUserById = (id) =>{
        return this.getBy({_id:id})
    }
    
}
---------------------------------------------------
src\routes\adoption.router.js
import { Router} from 'express';
import adoptionsController from '../controllers/adoptions.controller.js';

const router = Router();

router.get('/',adoptionsController.getAllAdoptions);
router.get('/:aid',adoptionsController.getAdoption);
router.post('/:uid/:pid',adoptionsController.createAdoption);

export default router;
---------------------------------------------------
src\routes\mocks.router.js
import { Router } from 'express';
import { generateMockPets } from '../utils/mockPets.js';
import { generateMockUsers } from '../utils/mockUsers.js';
import { usersService, petsService } from '../services/index.js';

const router = Router();

router.get('/mockingpets', (req, res) => {
    const numPets = parseInt(req.query.num) || 100;
    const mockPets = generateMockPets(numPets);
    res.send({ status: 'success', payload: mockPets });
});

router.get('/mockingusers', async (req, res) => {
    const numUsers = parseInt(req.query.num) || 50;
    const mockUsers = await generateMockUsers(numUsers);
    res.send({ status: 'success', payload: mockUsers });
});

router.post('/generateData', async (req, res) => {
    const { users = 0, pets = 0 } = req.body;
    
    const mockUsers = await generateMockUsers(users);
    const mockPets = generateMockPets(pets);

    await Promise.all([
        ...mockUsers.map(user => usersService.create(user)),
        ...mockPets.map(pet => petsService.create(pet))
    ]);

    res.send({ status: 'success', message: `${users} users and ${pets} pets inserted into the database` });
});

export default router;
---------------------------------------------------
src\routes\pets.router.js
import { Router } from 'express';
import petsController from '../controllers/pets.controller.js';
import uploader from '../utils/uploader.js';

const router = Router();

router.get('/',petsController.getAllPets);
router.post('/',petsController.createPet);
router.post('/withimage',uploader.single('image'), petsController.createPetWithImage);
router.put('/:pid',petsController.updatePet);
router.delete('/:pid',petsController.deletePet);

export default router;
---------------------------------------------------
src\routes\sessions.router.js
import { Router } from 'express';
import sessionsController from '../controllers/sessions.controller.js';

const router = Router();

router.post('/register',sessionsController.register);
router.post('/login',sessionsController.login);
router.get('/current',sessionsController.current);
router.get('/unprotectedLogin',sessionsController.unprotectedLogin);
router.get('/unprotectedCurrent',sessionsController.unprotectedCurrent);

export default router;
---------------------------------------------------
src\routes\users.router.js
import { Router } from 'express';
import usersController from '../controllers/users.controller.js';

const router = Router();

router.get('/',usersController.getAllUsers);
router.get('/:uid',usersController.getUser);
router.put('/:uid',usersController.updateUser);
router.delete('/:uid',usersController.deleteUser);
router.post('/', usersController.createUser);

export default router;

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Obtener todos los usuarios
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: lista de usuarios
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   _id:
 *                     type: string
 *                     description: ID del usuario
 *                   first_name:
 *                     type: string
 *                     description: Nombre del usuario
 *                   last_name:
 *                     type: string
 *                     description: Apellido del usuario
 *                   email:
 *                     type: string
 *                     description: Email del usuario
 */
router.get('/', usersController.getAllUsers);

/**
 * @swagger
 * /api/users:
 *   post:
 *     summary: Crear un nuevo usuario
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               first_name:
 *                 type: string
 *                 description: Nombre del usuario
 *               last_name:
 *                 type: string
 *                 description: Apellido del usuario
 *               email:
 *                 type: string
 *                 description: Correo electrónico único del usuario
 *               password:
 *                 type: string
 *                 description: Contraseña del usuario (será encriptada)
 *               role:
 *                 type: string
 *                 description: Rol del usuario (opcional, por defecto "user")
 *             example:
 *               first_name: Alejandro
 *               last_name: Gutierrez
 *               email: alejandrogutierrez@gmail.com
 *               password: coder123
 *               role: admin
 *     responses:
 *       201:
 *         description: Usuario creado exitosamente
 *       400:
 *         description: Error en los datos ingresados o usuario ya existente
 *       500:
 *         description: Error interno del servidor
 */
router.post('/', usersController.createUser);

/**
 * @swagger
 * /api/users/{uid}:
 *   get:
 *     summary: Obtener un usuario por ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: uid
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del usuario
 *     responses:
 *       200:
 *         description: Un usuario individual
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                   description: ID del usuario
 *                 first_name:
 *                   type: string
 *                   description: Nombre del usuario
 *                 last_name:
 *                   type: string
 *                   description: Apellido del usuario
 *                 email:
 *                   type: string
 *                   description: Email del usuario
 *       404:
 *         description: Usuario no encontrado
 */
router.get('/:uid', usersController.getUser);

/**
 * @swagger
 * /api/users/{uid}:
 *   put:
 *     summary: Actualizar un usuario
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: uid
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del usuario a actualizar
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               first_name:
 *                 type: string
 *                 description: Nombre del usuario
 *               last_name:
 *                 type: string
 *                 description: Apellido del usuario
 *               email:
 *                 type: string
 *                 description: Email del usuario
 *             example:
 *               first_name: Cristian
 *               last_name: Osorio
 *               email: cristianosorio@gmail.com
 *     responses:
 *       200:
 *         description: Usuario actualizado exitosamente
 *       404:
 *         description: Usuario no encontrado
 */
router.put('/:uid', usersController.updateUser);

/**
 * @swagger
 * /api/users/{uid}:
 *   delete:
 *     summary: Eliminar un usuario
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: uid
 *         schema:
 *           type: string
 *         required: true
 *         description: ID del usuario a eliminar
 *     responses:
 *       200:
 *         description: Usuario eliminado exitosamente
 *       404:
 *         description: Usuario no encontrado
 */
router.delete('/:uid', usersController.deleteUser);
---------------------------------------------------
src\services\index.js
import Users from "../dao/Users.dao.js";
import Pet from "../dao/Pets.dao.js";
import Adoption from "../dao/Adoption.js";

import UserRepository from "../repository/UserRepository.js";
import PetRepository from "../repository/PetRepository.js";
import AdoptionRepository from "../repository/AdoptionRepository.js";

export const usersService = new UserRepository(new Users());
export const petsService = new PetRepository(new Pet());
export const adoptionsService = new AdoptionRepository(new Adoption());

---------------------------------------------------
src\test\supertest.test.js
import mongoose from 'mongoose';
import request from 'supertest';
import { expect } from 'chai';
import app from '../app.js';

describe('Tests funcionales para la API', function () {
    this.timeout(5000); // Incrementar el tiempo límite si las pruebas tardan más en completarse.

    // Variables para datos de prueba
    let testUserId, testPetId;

    before(async function () {
        // Conexión a la base de datos de prueba
        const isTestEnv = process.env.NODE_ENV === 'test';
        const dbURI = isTestEnv ? process.env.MONGODB_TEST_URI : process.env.MONGODB_URI;
        await mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true });
    });

    after(async function () {
        // Cerrar la conexión después de las pruebas
        await mongoose.connection.close();
    });

    describe('Rutas de usuarios', function () {
        it('POST /api/users debería crear un usuario', async function () {
            const userData = {
                first_name: 'Test',
                last_name: 'User',
                email: `test${Date.now()}@example.com`,
                password: 'password123',
                role: 'user'
            };

            const result = await request(app)
                .post('/api/users')
                .send(userData)
                .set('Content-Type', 'application/json');

            expect(result.status).to.equal(201);
            expect(result.body).to.have.property('status', 'success');
            expect(result.body.payload).to.be.an('object');
            testUserId = result.body.payload._id; // Guardar el ID del usuario creado
        });

        it('GET /api/users debería obtener todos los usuarios', async function () {
            const result = await request(app).get('/api/users');
            expect(result.status).to.equal(200);
            expect(result.body).to.have.property('status', 'success');
            expect(result.body.payload).to.be.an('array');
        });
    });

    describe('Rutas de mascotas', function () {
        it('POST /api/pets debería crear una mascota', async function () {
            const petData = {
                name: 'TestPet',
                specie: 'Dog',
                birthDate: '2020-01-01',
                adopted: false
            };

            const result = await request(app)
                .post('/api/pets')
                .send(petData)
                .set('Content-Type', 'application/json');

            expect(result.status).to.equal(201);
            expect(result.body).to.have.property('status', 'success');
            expect(result.body.payload).to.be.an('object');
            testPetId = result.body.payload._id; // Guardar el ID de la mascota creada
        });

        it('GET /api/pets debería obtener todas las mascotas', async function () {
            const result = await request(app).get('/api/pets');
            expect(result.status).to.equal(200);
            expect(result.body).to.have.property('status', 'success');
            expect(result.body.payload).to.be.an('array');
        });
    });

    describe('Rutas de adopciones', function () {
        it('POST /api/adoptions/:uid/:pid debería crear una adopción', async function () {
            const result = await request(app)
                .post(`/api/adoptions/${testUserId}/${testPetId}`)
                .set('Content-Type', 'application/json');

            if (result.status === 400 || result.status === 404) {
                expect(result.body).to.have.property('error');
            } else {
                expect(result.status).to.equal(200);
                expect(result.body).to.have.property('status', 'success');
                expect(result.body.message).to.equal('Pet adopted');
            }
        });

        it('GET /api/adoptions debería obtener todas las adopciones', async function () {
            const result = await request(app).get('/api/adoptions');
            expect(result.status).to.equal(200);
            expect(result.body).to.have.property('status', 'success');
            expect(result.body.payload).to.be.an('array');
        });
    });
});
---------------------------------------------------
src\utils\index.js
import bcrypt from 'bcryptjs';
import {fileURLToPath} from 'url';
import { dirname } from 'path';

export const createHash = async(password) =>{
    const salts = await bcrypt.genSalt(10);
    return bcrypt.hash(password,salts);
}

export const passwordValidation = async(user,password) => bcrypt.compare(password,user.password);

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default __dirname;
---------------------------------------------------
src\utils\mockPets.js
import { faker } from '@faker-js/faker';

export const generateMockPets = (numPets) => {
    let pets = [];
    
    for (let i = 0; i < numPets; i++) {
        pets.push({
            name: faker.person.firstName(),
            specie: faker.animal.type(),
            birthDate: faker.date.past(5),
            adopted: false,
            owner: null,
            image: faker.image.url()
        });
    }
    
    return pets;
};
---------------------------------------------------
src\utils\mockUsers.js
import { faker } from '@faker-js/faker';
import { createHash } from './index.js';
import dotenv from 'dotenv';

dotenv.config();

export const generateMockUsers = async (numUsers) => {
    const users = [];
    const defaultPass = process.env.MOCK_USER_PASSWORD;

    for (let i = 0; i < numUsers; i++) {
        users.push({
            first_name: faker.person.firstName(),
            last_name: faker.person.lastName(),
            email: faker.internet.email(),
            password: await createHash(defaultPass),
            role: Math.random() < 0.5 ? 'user' : 'admin',
            pets: []
        });
    }
    return users;
};

---------------------------------------------------
src\utils\swaggerConfig.js
import swaggerJsDoc  from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";

const swaggerOptions = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'My API',
            version: '1.0.0',
            description: 'API CRUD documentation',
        },
        servers: [
            {
                url: 'http://localhost:8080',
            },
        ],
    },
    apis: ['./src/routes/users.router.js'],
};

const swaggerDocs = swaggerJsDoc (swaggerOptions);

export default (app) => {
    app.use('/apidocs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));
}
---------------------------------------------------
src\utils\uploader.js
import __dirname from "./index.js";
import multer from 'multer';

const storage = multer.diskStorage({
    destination:function(req,file,cb){
        cb(null,`${__dirname}/../public/img`)
    },
    filename:function(req,file,cb){
        cb(null,`${Date.now()}-${file.originalname}`)
    }
})

const uploader = multer({storage})

export default uploader;

